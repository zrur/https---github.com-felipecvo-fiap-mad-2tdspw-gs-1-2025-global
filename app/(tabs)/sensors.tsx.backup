import React, { useState } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  RefreshControl,
  TouchableOpacity,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const colors = {
  primary: '#2E8B57',
  secondary: '#87CEEB',
  success: '#32CD32',
  warning: '#FFA500',
  danger: '#DC143C',
  background: '#F5F5F5',
  surface: '#FFFFFF',
  text: '#2F4F4F',
  textLight: '#708090',
};

interface Sensor {
  id: number;
  name: string;
  zoneId: number;
  zoneName: string;
  humidity: number;
  status: 'online' | 'offline';
  battery: number;
}

export default function SensorsScreen() {
  const [sensors, setSensors] = useState<Sensor[]>([
    { id: 1, name: 'Sensor Umidade 01', zoneId: 1, zoneName: 'Horta Principal', humidity: 45, status: 'online', battery: 85 },
    { id: 2, name: 'Sensor Umidade 02', zoneId: 1, zoneName: 'Horta Principal', humidity: 32, status: 'online', battery: 92 },
    { id: 3, name: 'Sensor Umidade 03', zoneId: 2, zoneName: 'Zona Norte', humidity: 28, status: 'offline', battery: 45 },
    { id: 4, name: 'Sensor Umidade 04', zoneId: 3, zoneName: 'Estufa 1', humidity: 55, status: 'online', battery: 78 },
  ]);
  const [refreshing, setRefreshing] = useState(false);

  const onRefresh = () => {
    setRefreshing(true);
    setTimeout(() => {
      setRefreshing(false);
    }, 1000);
  };

  const getHumidityColor = (humidity: number) => {
    if (humidity < 30) return colors.danger;
    if (humidity < 50) return colors.warning;
    return colors.success;
  };

  const getStatusColor = (status: 'online' | 'offline') => {
    return status === 'online' ? colors.success : colors.danger;
  };

  const getBatteryColor = (battery: number) => {
    if (battery < 20) return colors.danger;
    if (battery < 50) return colors.warning;
    return colors.success;
  };

  const renderSensor = ({ item }: { item: Sensor }) => (
    <View style={styles.sensorCard}>
      <View style={styles.sensorHeader}>
        <View style={styles.sensorInfo}>
          <Text style={styles.sensorName}>{item.name}</Text>
          <Text style={styles.sensorZone}>{item.zoneName}</Text>
        </View>
        <View style={[styles.statusIndicator, { backgroundColor: getStatusColor(item.status) }]}>
          <Text style={styles.statusText}>{item.status === 'online' ? 'Online' : 'Offline'}</Text>
        </View>
      </View>

      <View style={styles.sensorMetrics}>
        <View style={styles.metric}>
          <Ionicons name="water" size={20} color={getHumidityColor(item.humidity)} />
          <Text style={styles.metricLabel}>Umidade</Text>
          <Text style={[styles.metricValue, { color: getHumidityColor(item.humidity) }]}>
            {item.humidity}%
          </Text>
        </View>

        <View style={styles.metric}>
          <Ionicons name="battery-half" size={20} color={getBatteryColor(item.battery)} />
          <Text style={styles.metricLabel}>Bateria</Text>
          <Text style={[styles.metricValue, { color: getBatteryColor(item.battery) }]}>
            {item.battery}%
          </Text>
        </View>

        <TouchableOpacity style={styles.detailButton}>
          <Ionicons name="eye" size={16} color={colors.primary} />
          <Text style={styles.detailButtonText}>Detalhes</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Sensores</Text>
        <Text style={styles.headerSubtitle}>{sensors.filter(s => s.status === 'online').length} de {sensors.length} online</Text>
      </View>

      <FlatList
        data={sensors}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderSensor}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        contentContainerStyle={styles.listContainer}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    backgroundColor: colors.secondary,
    paddingHorizontal: 20,
    paddingVertical: 20,
    paddingTop: 60,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#fff',
    opacity: 0.8,
    marginTop: 4,
  },
  listContainer: {
    padding: 16,
  },
  sensorCard: {
    backgroundColor: colors.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 3,
  },
  sensorHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  sensorInfo: {
    flex: 1,
  },
  sensorName: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 4,
  },
  sensorZone: {
    fontSize: 14,
    color: colors.textLight,
  },
  statusIndicator: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '500',
  },
  sensorMetrics: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  metric: {
    alignItems: 'center',
    flex: 1,
  },
  metricLabel: {
    fontSize: 12,
    color: colors.textLight,
    marginTop: 4,
  },
  metricValue: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 2,
  },
  detailButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.background,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    gap: 4,
  },
  detailButtonText: {
    color: colors.primary,
    fontSize: 12,
    fontWeight: '500',
  },
});
