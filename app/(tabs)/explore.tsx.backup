import React, { useState } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  StyleSheet,
  Alert,
  RefreshControl,
  Modal,
  TextInput,
  ScrollView,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const colors = {
  primary: '#2E8B57',
  secondary: '#87CEEB',
  success: '#32CD32',
  warning: '#FFA500',
  danger: '#DC143C',
  background: '#F5F5F5',
  surface: '#FFFFFF',
  text: '#2F4F4F',
  textLight: '#708090',
  border: '#E0E0E0',
};

interface Zone {
  id: number;
  name: string;
  area: number;
  cropType: string;
  description?: string;
  active: boolean;
  humidity: number;
}

interface FormData {
  name: string;
  area: string;
  cropType: string;
  description: string;
}

export default function ZonesScreen() {
  const [zones, setZones] = useState<Zone[]>([
    { id: 1, name: 'Horta Principal', area: 100, cropType: 'Tomate', active: true, humidity: 45 },
    { id: 2, name: 'Zona Norte', area: 75, cropType: 'Alface', active: true, humidity: 30 },
    { id: 3, name: 'Estufa 1', area: 50, cropType: 'Pepino', active: false, humidity: 25 },
    { id: 4, name: 'Área Sul', area: 120, cropType: 'Cenoura', active: true, humidity: 55 },
  ]);
  
  const [refreshing, setRefreshing] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editingZone, setEditingZone] = useState<Zone | null>(null);
  const [formData, setFormData] = useState<FormData>({
    name: '',
    area: '',
    cropType: '',
    description: '',
  });

  const fetchZones = async () => {
    try {
      console.log('Zonas carregadas');
    } catch (error) {
      Alert.alert('Erro', 'Não foi possível carregar as zonas');
    } finally {
      setRefreshing(false);
    }
  };

  const onRefresh = () => {
    setRefreshing(true);
    fetchZones();
  };

  const openAddModal = () => {
    setEditingZone(null);
    setFormData({ name: '', area: '', cropType: '', description: '' });
    setModalVisible(true);
  };

  const openEditModal = (zone: Zone) => {
    setEditingZone(zone);
    setFormData({
      name: zone.name,
      area: zone.area.toString(),
      cropType: zone.cropType,
      description: zone.description || '',
    });
    setModalVisible(true);
  };

  const handleSave = () => {
    if (!formData.name || !formData.area) {
      Alert.alert('Erro', 'Preencha todos os campos obrigatórios');
      return;
    }

    const newZone: Zone = {
      id: editingZone ? editingZone.id : Date.now(),
      name: formData.name,
      area: parseInt(formData.area),
      cropType: formData.cropType,
      description: formData.description,
      active: editingZone ? editingZone.active : true,
      humidity: editingZone ? editingZone.humidity : Math.floor(Math.random() * 60) + 20,
    };

    if (editingZone) {
      setZones(zones.map(zone => zone.id === editingZone.id ? newZone : zone));
      Alert.alert('Sucesso', 'Zona atualizada com sucesso!');
    } else {
      setZones([...zones, newZone]);
      Alert.alert('Sucesso', 'Zona criada com sucesso!');
    }

    setModalVisible(false);
  };

  const handleDelete = (zone: Zone) => {
    Alert.alert(
      'Confirmar Exclusão',
      `Deseja excluir a zona "${zone.name}"?`,
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Excluir',
          style: 'destructive',
          onPress: () => {
            setZones(zones.filter(z => z.id !== zone.id));
            Alert.alert('Sucesso', 'Zona excluída com sucesso!');
          },
        },
      ]
    );
  };

  const toggleZoneStatus = (zone: Zone) => {
    setZones(zones.map(z => 
      z.id === zone.id ? { ...z, active: !z.active } : z
    ));
  };

  const getHumidityColor = (humidity: number) => {
    if (humidity < 30) return colors.danger;
    if (humidity < 50) return colors.warning;
    return colors.success;
  };

  const renderZone = ({ item }: { item: Zone }) => (
    <View style={styles.zoneCard}>
      <View style={styles.zoneHeader}>
        <View style={styles.zoneNameContainer}>
          <Text style={styles.zoneName}>{item.name}</Text>
          <View style={[
            styles.statusBadge,
            { backgroundColor: item.active ? colors.success : colors.textLight }
          ]}>
            <Text style={styles.statusText}>
              {item.active ? 'Ativo' : 'Inativo'}
            </Text>
          </View>
        </View>
        
        <View style={styles.zoneActions}>
          <TouchableOpacity
            style={styles.actionButton}
            onPress={() => toggleZoneStatus(item)}
          >
            <Ionicons 
              name={item.active ? 'pause' : 'play'} 
              size={20} 
              color={colors.primary} 
            />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.actionButton}
            onPress={() => openEditModal(item)}
          >
            <Ionicons name="create" size={20} color={colors.secondary} />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.actionButton}
            onPress={() => handleDelete(item)}
          >
            <Ionicons name="trash" size={20} color={colors.danger} />
          </TouchableOpacity>
        </View>
      </View>
      
      <View style={styles.zoneDetails}>
        <View style={styles.detailRow}>
          <Ionicons name="square" size={16} color={colors.textLight} />
          <Text style={styles.detailText}>Área: {item.area}m²</Text>
        </View>
        <View style={styles.detailRow}>
          <Ionicons name="leaf" size={16} color={colors.textLight} />
          <Text style={styles.detailText}>Cultura: {item.cropType}</Text>
        </View>
        <View style={styles.detailRow}>
          <Ionicons name="water" size={16} color={getHumidityColor(item.humidity)} />
          <Text style={[styles.detailText, { color: getHumidityColor(item.humidity) }]}>
            Umidade: {item.humidity}%
          </Text>
        </View>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Zonas de Irrigação</Text>
        <Text style={styles.headerSubtitle}>{zones.length} zonas cadastradas</Text>
      </View>

      <FlatList
        data={zones}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderZone}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        contentContainerStyle={styles.listContainer}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Ionicons name="leaf-outline" size={64} color={colors.textLight} />
            <Text style={styles.emptyText}>Nenhuma zona cadastrada</Text>
            <Text style={styles.emptySubtext}>Toque no + para criar sua primeira zona</Text>
          </View>
        }
      />
      
      <TouchableOpacity
        style={styles.fab}
        onPress={openAddModal}
      >
        <Ionicons name="add" size={24} color="#fff" />
      </TouchableOpacity>

      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {editingZone ? 'Editar Zona' : 'Nova Zona'}
              </Text>
              <TouchableOpacity onPress={() => setModalVisible(false)}>
                <Ionicons name="close" size={24} color={colors.text} />
              </TouchableOpacity>
            </View>

            <ScrollView style={styles.modalForm}>
              <Text style={styles.label}>Nome da Zona *</Text>
              <TextInput
                style={styles.input}
                value={formData.name}
                onChangeText={(value) => setFormData({...formData, name: value})}
                placeholder="Ex: Horta Principal"
              />

              <Text style={styles.label}>Área (m²) *</Text>
              <TextInput
                style={styles.input}
                value={formData.area}
                onChangeText={(value) => setFormData({...formData, area: value})}
                placeholder="Ex: 100"
                keyboardType="numeric"
              />

              <Text style={styles.label}>Tipo de Cultura</Text>
              <TextInput
                style={styles.input}
                value={formData.cropType}
                onChangeText={(value) => setFormData({...formData, cropType: value})}
                placeholder="Ex: Tomate, Alface, Cenoura"
              />

              <Text style={styles.label}>Descrição</Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                value={formData.description}
                onChangeText={(value) => setFormData({...formData, description: value})}
                placeholder="Descrição da zona de irrigação..."
                multiline
                numberOfLines={3}
              />
            </ScrollView>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>Cancelar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalButton, styles.saveButton]}
                onPress={handleSave}
              >
                <Text style={styles.saveButtonText}>
                  {editingZone ? 'Atualizar' : 'Criar'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    backgroundColor: colors.primary,
    paddingHorizontal: 20,
    paddingVertical: 20,
    paddingTop: 60,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#fff',
    opacity: 0.8,
    marginTop: 4,
  },
  listContainer: {
    padding: 16,
    paddingBottom: 80,
  },
  zoneCard: {
    backgroundColor: colors.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  zoneHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  zoneNameContainer: {
    flex: 1,
  },
  zoneName: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 8,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  statusText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '500',
  },
  zoneActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: colors.background,
  },
  zoneDetails: {
    gap: 8,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  detailText: {
    fontSize: 14,
    color: colors.textLight,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 50,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.textLight,
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: colors.textLight,
    marginTop: 8,
    textAlign: 'center',
  },
  fab: {
    position: 'absolute',
    right: 20,
    bottom: 20,
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: colors.surface,
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: colors.text,
  },
  modalForm: {
    padding: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 8,
    marginTop: 16,
  },
  input: {
    backgroundColor: colors.background,
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: colors.text,
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  modalActions: {
    flexDirection: 'row',
    padding: 20,
    gap: 12,
  },
  modalButton: {
    flex: 1,
    paddingVertical: 14,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: colors.background,
    borderWidth: 1,
    borderColor: colors.border,
  },
  saveButton: {
    backgroundColor: colors.primary,
  },
  cancelButtonText: {
    color: colors.text,
    fontSize: 16,
    fontWeight: '600',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
