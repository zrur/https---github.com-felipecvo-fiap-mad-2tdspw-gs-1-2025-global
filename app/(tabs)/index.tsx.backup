import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
  Alert,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const colors = {
  primary: '#2E8B57',
  secondary: '#87CEEB',
  accent: '#FFD700',
  success: '#32CD32',
  warning: '#FFA500',
  danger: '#DC143C',
  background: '#F5F5F5',
  surface: '#FFFFFF',
  text: '#2F4F4F',
  textLight: '#708090',
};

interface DashboardData {
  totalZones: number;
  activeZones: number;
  totalSensors: number;
  activeSensors: number;
  alerts: Array<{
    id: number;
    zoneName: string;
    humidity: number;
    type: string;
  }>;
}

interface StatCardProps {
  title: string;
  value: number;
  subtitle?: string;
  color: string;
  onPress?: () => void;
}

interface AlertCardProps {
  alert: {
    id: number;
    zoneName: string;
    humidity: number;
    type: string;
  };
}

export default function DashboardScreen() {
  const [refreshing, setRefreshing] = useState(false);
  const [dashboardData, setDashboardData] = useState<DashboardData>({
    totalZones: 5,
    activeZones: 4,
    totalSensors: 12,
    activeSensors: 10,
    alerts: [
      { id: 1, zoneName: 'Horta Principal', humidity: 25, type: 'low_humidity' },
      { id: 2, zoneName: 'Zona Norte', humidity: 20, type: 'low_humidity' },
    ],
  });

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      console.log('Dados do dashboard carregados');
      // Aqui você integraria com sua API real
    } catch (error) {
      console.error('Erro ao carregar dashboard:', error);
      Alert.alert('Erro', 'Não foi possível carregar os dados do dashboard');
    } finally {
      setRefreshing(false);
    }
  };

  const onRefresh = () => {
    setRefreshing(true);
    fetchDashboardData();
  };

  const handleQuickIrrigation = (zoneId: number) => {
    Alert.alert(
      'Irrigação Rápida',
      'Deseja ativar a irrigação desta zona agora?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Ativar',
          onPress: () => {
            Alert.alert('Sucesso', 'Irrigação ativada!');
          },
        },
      ]
    );
  };

  const StatCard = ({ title, value, subtitle, color, onPress }: StatCardProps) => (
    <TouchableOpacity
      style={[styles.statCard, { borderLeftColor: color }]}
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={styles.statCardContent}>
        <Text style={styles.statTitle}>{title}</Text>
        <Text style={[styles.statValue, { color }]}>{value}</Text>
        {subtitle && <Text style={styles.statSubtitle}>{subtitle}</Text>}
      </View>
    </TouchableOpacity>
  );

  const AlertCard = ({ alert }: AlertCardProps) => (
    <View style={[styles.alertCard, styles.alertDanger]}>
      <Ionicons name="warning" size={24} color={colors.danger} />
      <View style={styles.alertContent}>
        <Text style={styles.alertTitle}>Solo Seco Detectado</Text>
        <Text style={styles.alertText}>
          {alert.zoneName} - Umidade: {alert.humidity}%
        </Text>
      </View>
      <TouchableOpacity
        style={styles.alertAction}
        onPress={() => handleQuickIrrigation(alert.id)}
      >
        <Ionicons name="water" size={20} color={colors.primary} />
      </TouchableOpacity>
    </View>
  );

  return (
    <ScrollView
      style={styles.container}
      refreshControl={
        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
      }
    >
      <View style={styles.header}>
        <Text style={styles.welcomeText}>Bem-vindo ao</Text>
        <Text style={styles.appTitle}>IrrigaFácil</Text>
        <Text style={styles.subtitle}>Sistema de Irrigação Inteligente</Text>
      </View>

      <View style={styles.statsContainer}>
        <View style={styles.statsRow}>
          <StatCard
            title="Zonas"
            value={dashboardData.activeZones}
            subtitle={`de ${dashboardData.totalZones} ativas`}
            color={colors.primary}
          />
          <StatCard
            title="Sensores"
            value={dashboardData.activeSensors}
            subtitle={`de ${dashboardData.totalSensors} online`}
            color={colors.secondary}
          />
        </View>
      </View>

      {dashboardData.alerts.length > 0 && (
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Ionicons name="notifications" size={24} color={colors.warning} />
            <Text style={styles.sectionTitle}>Alertas Críticos</Text>
          </View>
          {dashboardData.alerts.map((alert) => (
            <AlertCard key={alert.id} alert={alert} />
          ))}
        </View>
      )}

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Ações Rápidas</Text>
        <View style={styles.quickActions}>
          <TouchableOpacity
            style={[styles.actionButton, { backgroundColor: colors.primary }]}
          >
            <Ionicons name="water" size={28} color="#fff" />
            <Text style={styles.actionButtonText}>Irrigar Agora</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.actionButton, { backgroundColor: colors.secondary }]}
          >
            <Ionicons name="analytics" size={28} color="#fff" />
            <Text style={styles.actionButtonText}>Ver Sensores</Text>
          </TouchableOpacity>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Status do Sistema</Text>
        <View style={styles.statusContainer}>
          <View style={styles.statusItem}>
            <Ionicons
              name="ellipse"
              size={16}
              color={dashboardData.activeSensors > 0 ? colors.success : colors.danger}
            />
            <Text style={styles.statusText}>
              Sensores: {dashboardData.activeSensors > 0 ? 'Online' : 'Offline'}
            </Text>
          </View>
          <View style={styles.statusItem}>
            <Ionicons
              name="ellipse"
              size={16}
              color={dashboardData.alerts.length === 0 ? colors.success : colors.warning}
            />
            <Text style={styles.statusText}>
              Alertas: {dashboardData.alerts.length === 0 ? 'Nenhum' : `${dashboardData.alerts.length} pendente(s)`}
            </Text>
          </View>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    backgroundColor: colors.primary,
    paddingHorizontal: 20,
    paddingVertical: 30,
    paddingTop: 60,
  },
  welcomeText: {
    fontSize: 16,
    color: '#fff',
    opacity: 0.9,
  },
  appTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#fff',
    marginVertical: 5,
  },
  subtitle: {
    fontSize: 14,
    color: '#fff',
    opacity: 0.8,
  },
  statsContainer: {
    padding: 20,
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statCard: {
    backgroundColor: colors.surface,
    borderRadius: 12,
    padding: 20,
    flex: 0.48,
    borderLeftWidth: 4,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  statCardContent: {
    alignItems: 'center',
  },
  statTitle: {
    fontSize: 14,
    color: colors.textLight,
    marginBottom: 8,
  },
  statValue: {
    fontSize: 32,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  statSubtitle: {
    fontSize: 12,
    color: colors.textLight,
    textAlign: 'center',
  },
  section: {
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginLeft: 8,
  },
  alertCard: {
    backgroundColor: colors.surface,
    borderRadius: 8,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
    elevation: 2,
  },
  alertDanger: {
    borderLeftWidth: 4,
    borderLeftColor: colors.danger,
  },
  alertContent: {
    flex: 1,
    marginLeft: 12,
  },
  alertTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 2,
  },
  alertText: {
    fontSize: 12,
    color: colors.textLight,
  },
  alertAction: {
    padding: 8,
  },
  quickActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  actionButton: {
    flex: 0.48,
    borderRadius: 12,
    padding: 20,
    alignItems: 'center',
    elevation: 3,
  },
  actionButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
    marginTop: 8,
  },
  statusContainer: {
    backgroundColor: colors.surface,
    borderRadius: 8,
    padding: 15,
  },
  statusItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  statusText: {
    fontSize: 14,
    color: colors.text,
    marginLeft: 8,
  },
});
